@using StrikeTrip.Models;
@using StrikeTrip.UtilityMethods;
@using System.Text.RegularExpressions;

@model List<Trip>

@{
    ViewBag.Title = "Trips";
    Layout = "~/Views/Shared/_Layout.cshtml";
    string lat = ViewBag.Latitude;
    string longitude = ViewBag.Longitude;
}



<script type="text/javascript">


    var center = new google.maps.LatLng(@lat, @longitude);
    $(document).ready(function () {
        map = new google.maps.Map(document.getElementById("map"), {
            zoom: 5,
            center: center,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        });

        var flightPlanCoordinates = [

            { lat: 34.0522, lng: -118.243 },
            { lat: @lat, lng: @longitude }



        ];
    var flightPath = new google.maps.Polyline({
        path: flightPlanCoordinates,
        geodesic: true,
        strokeColor: '#FF0000',
        strokeOpacity: 1.0,
        strokeWeight: 1
    });

    flightPath.setMap(map);
    });

</script>



<div class="container-fluid form_map">
    <div class="row">
        <div class="col-md-4">



            <h2>Pick Your Standards</h2>
            @using (Html.BeginForm("Trips", "Home", FormMethod.Get))
            {

                <div style="padding-left: 45px">
                    @Html.Label("InputMaxPrice", "Max price")<br />
                    @Html.TextBox("inputPrice", "500")

                </div>
                <div style="padding-left: 45px">
                    @Html.Label("InputMinSurfHeight", "Min surf height")<br />
                    @Html.TextBox("inputHeight", "5")

                </div>
                <div style="padding-left: 45px">
                    @Html.Label("InputDepartureDate", "Departure date")<br />
                    @Html.TextBox("inputDepartureDate")
                </div>
                <div style="padding-left: 45px">
                    @Html.Label("InputeReturnDate", "Return date")<br />
                    @Html.TextBox("inputReturnDate")
                </div>
                <div style="padding-left: 45px">
                    <br />
                    <button style="box-shadow: none;">Submit</button>
                </div>


            }

        </div>
        <div class="col-md-2"></div>
        <div class="col-md-7 text-center">
            <h3 class="selection">Best option: @Model[0].BestOption(Model[0].LocationName, Model[0].Price)</h3>
            <div id="map" style="width: 100%; height: 200px;">
            </div>
        </div>
    </div>
</div>


@{
    if (Model.Count == 1 && Model[0].LocationName == null)
    {
        <div class="container-fluid parameters">
            <div class="row">
                <div class="col-sm-4"></div>
                <div class="col-xs-6 col-sm-2">Price: <strong class="no_flights_params">@Model[0].PriceString(Model[0].InputMaxPrice)</strong></div>
                <div class="col-xs-6 col-sm-2">Surf height: <strong class="no_flights_params">@Model[0].SurfHeightString(Model[0].InputMinSurfHeight)</strong></div>
                <div class="col-sm-4"></div>
            </div>
            <div class="row">
                <div class="col-sm-4"></div>
                <div class="col-xs-6 col-sm-2">Departure: <strong class="no_flights_params">@Model[0].DateTimeString(Model[0].InputDepartureDate)</strong></div>
                <div class="col-xs-6 col-sm-2">Return: <strong class="no_flights_params">@Model[0].DateTimeString(Model[0].InputReturnDate)</strong></div>
                <div class="col-sm-4"></div>
            </div>
        </div>
    }
    else
    {

        <div class="container-fluid parameters">
            <div class="row">
                <div class="col-sm-4"></div>
                <div class="col-xs-6 col-sm-2">Price: <strong>@Model[0].PriceString(Model[0].InputMaxPrice)</strong></div>
                <div class="col-xs-6 col-sm-2">Surf height: <strong>@Model[0].SurfHeightString(Model[0].InputMinSurfHeight)</strong></div>
                <div class="col-sm-4"></div>
            </div>
            <div class="row">
                <div class="col-sm-4"></div>
                <div class="col-xs-6 col-sm-2">Departure: <strong>@Model[0].DateTimeString(Model[0].InputDepartureDate)</strong></div>
                <div class="col-xs-6 col-sm-2">Return: <strong>@Model[0].DateTimeString(Model[0].InputReturnDate)</strong></div>
                <div class="col-sm-4"></div>
            </div>
        </div>


    }
}

<p id="temp">Click inside the table and scroll with arrow keys or click on a trip to see the location on the map</p>
<div class="separate"></div>
<div class="scrollit">
    <table class="table">
        <tr>
            <th>
                Location
            </th>
            <th>
                Spot
            </th>
            <th>
                Departure Date
            </th>
            <th>
                Return Date
            </th>
            <th>
                Max Surf Height During Trip
            </th>
            <th>
                Number of Days with Good Surf
            </th>
            <th>
                Flight Price
            </th>
        </tr>

        @if (Model.Count >= 1 && Model[0].LocationName != null)
        {
            <tr id="0" class="highlight" data-name="@Model[0].LocationName $@Model[0].Price" data-lat="@Model[0].FixLatLong(Model[0].LocationName, Model[0].Latitude)" data-long="@Model[0].Longitude">
                <td>
                    @Model[0].LocationName
                </td>
                <td>
                    @Model[0].SpotName
                </td>
                <td>
                    @Model[0].DepartureDate.ToShortDateString()
                </td>
                <td>
                    @Model[0].ReturnDate.ToShortDateString()
                </td>
                <td>
                    @Math.Truncate(Model[0].MaxSurfHeight)ft
                </td>
                <td>
                    @Model[0].SurfDays()
                </td>
                <td>
                    $@Math.Truncate(Model[0].Price)
                </td>
                <td>
                    @Html.ActionLink("Forecast", "Forecast", new { id = Model[0].SpotName }, new { @class = "details_button" })
                </td>
                <td>
                    @Html.ActionLink("MSW", "ForecastFrame", new { id = Model[0].NameSpotId() }, new { @class = "details_button" })
                </td>
            </tr>
            for (int i = 1; i < Model.Count; i++)
            {
                <tr id="@i" data-name="@Model[i].LocationName $@Model[i].Price"  data-lat="@Model[i].FixLatLong(Model[i].LocationName, Model[i].Latitude)" data-long="@Model[i].Longitude">
                    <td>
                        @Html.DisplayFor(modelItem => Model[i].LocationName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => Model[i].SpotName)
                    </td>
                    <td>
                        @Model[i].DepartureDate.ToShortDateString()
                    </td>
                    <td>
                        @Model[i].ReturnDate.ToShortDateString()
                    </td>
                    <td>
                        @Math.Truncate(Model[i].MaxSurfHeight)ft
                    </td>
                    <td>
                        @Model[i].SurfDays()
                    </td>
                    <td>
                        $@Math.Truncate(Model[i].Price)
                    </td>
                    <td>
                        @Html.ActionLink("Forecast", "Forecast", new { id = Model[i].SpotName }, new { @class = "details_button" })
                    </td>
                    <td>
                        @Html.ActionLink("MSW", "ForecastFrame", new { id = Model[i].NameSpotId() }, new { @class = "details_button" })
                    </td>
                </tr>
            }
        }

    </table>
</div>
@if (Model.Count == 1 && Model[0].LocationName == null)
{

    <div class="no_flights_table">No trips are available with the selected characteristics.</div>
}

